# Visualization Dockerfile - PyQt5 GUI Only
FROM ros:humble-ros-base-jammy as base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV ROS_DISTRO=humble
ENV COLCON_WS=/workspace
ENV SHELL=/bin/bash

# Install system dependencies for visualization
RUN apt-get update && apt-get install -y \
    python3-pip \
    python3-dev \
    python3-venv \
    python3-opencv \
    python3-numpy \
    python3-scipy \
    python3-matplotlib \
    python3-yaml \
    python3-pyqt5 \
    python3-pyqt5.qtopengl \
    python3-opengl \
    pyqt5-dev-tools \
    qttools5-dev-tools \
    qt5-qmake \
    git \
    curl \
    wget \
    pkg-config \
    ros-humble-sensor-msgs \
    ros-humble-geometry-msgs \
    ros-humble-nav-msgs \
    ros-humble-visualization-msgs \
    ros-humble-rmw-cyclonedx-cpp \
    python3-colcon-common-extensions \
    python3-rosdep \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages for visualization
RUN pip3 install --no-cache-dir \
    pyqtgraph==0.13.3 \
    PyOpenGL==3.1.7 \
    PyOpenGL-accelerate==3.1.7 \
    pyzmq==25.1.0

# Initialize rosdep
RUN if [ ! -f /etc/ros/rosdep/sources.list.d/20-default.list ]; then rosdep init; fi && rosdep update

# Set up workspace
WORKDIR ${COLCON_WS}
COPY . ${COLCON_WS}/src/python_slam/

# Install Python dependencies
RUN cd ${COLCON_WS}/src/python_slam && \
    if [ -f requirements.txt ]; then pip3 install --no-cache-dir -r requirements.txt; fi

# Development stage with additional tools
FROM base as development

# Install development tools
RUN apt-get update && apt-get install -y \
    vim \
    nano \
    gdb \
    htop \
    tree \
    tmux \
    bash-completion \
    x11-apps \
    xauth \
    && rm -rf /var/lib/apt/lists/*

# Install additional Python development packages
RUN pip3 install --no-cache-dir \
    ipython \
    jupyter

# Set up development environment
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc && \
    echo "source ${COLCON_WS}/install/setup.bash" >> ~/.bashrc && \
    echo "export PYTHONPATH=${COLCON_WS}/src/python_slam/src:\$PYTHONPATH" >> ~/.bashrc

# Production stage
FROM base as production

# Build the ROS 2 workspace (minimal for visualization)
RUN cd ${COLCON_WS} && \
    rosdep install --from-paths src --ignore-src -r -y && \
    colcon build --packages-select python_slam

# Set up configuration directory
RUN mkdir -p /workspace/config

# Copy CyclonDX configuration
COPY docker/cyclonedx.xml /workspace/config/cyclonedx.xml

# Source the workspace
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc && \
    echo "source ${COLCON_WS}/install/setup.bash" >> ~/.bashrc

WORKDIR ${COLCON_WS}
CMD ["python3", "src/python_slam/gui/slam_visualizer.py"]

# Runtime stage for GUI deployment
FROM base as runtime

ENV ROS_DISTRO=humble
ENV COLCON_WS=/workspace

# Copy built workspace from production stage
COPY --from=production ${COLCON_WS}/install ${COLCON_WS}/install
COPY --from=production ${COLCON_WS}/src ${COLCON_WS}/src

# Source ROS 2 and workspace
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc && \
    echo "source ${COLCON_WS}/install/setup.bash" >> ~/.bashrc

WORKDIR ${COLCON_WS}
CMD ["python3", "src/python_slam/gui/slam_visualizer.py"]
